using System;

namespace ValueandReferenceTypes
{
  class Program
  {
 static void Main(string[] args)
 {
   //Присваиание двух анутренних типов значений дает
   //в результате две независимые переменные в стеке;
   
  Console.WriteLine("Assigning value types\n");
  Point p1 = new Point(10, 10);
  Point p2 = p1;

  //вывести значение обеих переменных Point
  p1.Display();
  p2.Display();
  
   //изменить p1.X b и снова вывести значение переменных
   //значение p2.X не изменилось
   p1.X = 100;
   Console.WriteLine("\n => Changed p1.X\n");
   p1.Display();
   p2.Display();
   
   //Здесь сначала создается переменная типа Point (p1), которая затем присваиваетсядругой переменной типа Point (р2). 
   //Поскольку Point относится к типу значения, в стеке размещаются две копии МуPoint, 
   //каждой из которых можно манипулировать независимо. 
   //Поэтому при изменении значения p1.X значение р2.X остается незатронутым


   //В отличие от типов значений, когда операция присваивания применяется к ссылочным типам
   //(т.е.экземплярам всех классов), происходит переадресация на то, на что ссылочная переменная указывает в памяти.

   Console.WriteLine("Assigning refefrence types\n");
   PointRef p11 = new PointRef(10, 10);
   PointRef p22 = p11;
   p11.Display();
   p22.Display();
   // Вывести обе переменных PointRef.p1.Display();p2.Display();
   // Изменить p1.X и вывести снова.
   p11.X = 100;
   Console.WriteLine("\n=> Changed p11.X\n"); p11.Display(); p22.Display();
   Console.ReadLine();

   //В этом случае получаются две ссылки, указывающие на один и тот же объект в управляемой куче. 
   //Таким образом, при изменении значения X с использованием ссылки p1 изменится также и значение р2.X.
 }
  }
}

